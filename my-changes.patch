diff --git a/__tests__/unit/CopyFile.ts b/__tests__/unit/CopyFile.ts
index a58f3e1..6f06e7b 100644
--- a/__tests__/unit/CopyFile.ts
+++ b/__tests__/unit/CopyFile.ts
@@ -3,7 +3,7 @@ import { VirtualIDE } from "../../src/VirtualIDE";
 describe("VirtualIDE", () => {
     describe("copy files", () => {
         it("should be able to copy a file to another", () => {
-            const virtualIDE = new VirtualIDE(undefined, undefined, true);
+            const virtualIDE = new VirtualIDE(undefined, undefined);
             virtualIDE.applyAction({
                 name: "file-explorer-create-file",
                 value: "test.md"
diff --git a/__tests__/unit/FullExample.ts b/__tests__/unit/FullExample.ts
index a1aa4b5..9d1ae18 100644
--- a/__tests__/unit/FullExample.ts
+++ b/__tests__/unit/FullExample.ts
@@ -7,7 +7,7 @@ import { VirtualTerminal } from "@fullstackcraftllc/codevideo-virtual-terminal";
 describe("VirtualIDE", () => {
   describe("complex tutorial scenario", () => {
     it("should maintain correct state throughout a complete tutorial", () => {
-      const virtualIDE = new VirtualIDE();
+      const virtualIDE = new VirtualIDE(undefined, undefined, true);
       virtualIDE.addVirtualTerminal(new VirtualTerminal());
       virtualIDE.addVirtualAuthor(new VirtualAuthor());
       const tutorialActions: IAction[] = [
@@ -43,7 +43,11 @@ describe("VirtualIDE", () => {
           value: "src/hello-world.js"
         },
         {
-          name: "mouse-click-editor",
+          name: "mouse-move-editor",
+          value: "1"
+        },
+        {
+          name: "mouse-left-click",
           value: "1"
         },
         {
@@ -65,7 +69,11 @@ describe("VirtualIDE", () => {
           value: "1"
         },
         {
-          name: "mouse-click-terminal",
+          name: "mouse-move-terminal",
+          value: "1"
+        },
+        {
+          name: "mouse-left-click",
           value: "1"
         },
         {
@@ -95,7 +103,11 @@ describe("VirtualIDE", () => {
           value: "src/utils/logger.js"
         },
         {
-          name: "mouse-click-editor",
+          name: "mouse-move-editor",
+          value: "1"
+        },
+        {
+          name: "mouse-left-click",
           value: "1"
         },
         {
@@ -109,11 +121,19 @@ describe("VirtualIDE", () => {
 
         // Updating main file
         {
-          name: "mouse-click-filename",
+          name: "mouse-move-file-explorer-file",
           value: "src/hello-world.js"
         },
         {
-          name: "mouse-click-editor",
+          name: "mouse-left-click",
+          value: "1"
+        },
+        {
+          name: "mouse-move-editor",
+          value: "1"
+        },
+        {
+          name: "mouse-left-click",
           value: "1"
         },
         {
@@ -131,7 +151,11 @@ describe("VirtualIDE", () => {
 
         // Final run
         {
-          name: "mouse-click-terminal",
+          name: "mouse-move-terminal",
+          value: "1"
+        },
+        {
+          name: "mouse-left-click",
           value: "1"
         },
         {
diff --git a/__tests__/unit/Fuzz.ts b/__tests__/unit/Fuzz.ts
index 0408c1c..3fbc33f 100644
--- a/__tests__/unit/Fuzz.ts
+++ b/__tests__/unit/Fuzz.ts
@@ -5,7 +5,7 @@ describe("VirtualIDE", () => {
     describe("fuzz test", () => {
         it("should not crash when trying to apply a dummy value for name of AllActions", () => {
             // arrange
-            const virtualIDE = new VirtualIDE(undefined, undefined, true);
+            const virtualIDE = new VirtualIDE(undefined, undefined);
 
             // act
             for (let i = 0; i < AllActionStrings.length; i++) {
diff --git a/__tests__/unit/MoveFile.ts b/__tests__/unit/MoveFile.ts
index 5de5a35..b0e44af 100644
--- a/__tests__/unit/MoveFile.ts
+++ b/__tests__/unit/MoveFile.ts
@@ -3,7 +3,7 @@ import { VirtualIDE } from "../../src/VirtualIDE";
 describe("VirtualIDE", () => {
     describe("copy files", () => {
         it("should be able to move a file to another", () => {
-            const virtualIDE = new VirtualIDE(undefined, undefined, true);
+            const virtualIDE = new VirtualIDE(undefined, undefined);
             virtualIDE.applyAction({
                 name: "file-explorer-create-file",
                 value: "test.md"
diff --git a/__tests__/unit/PerformanceTests.ts b/__tests__/unit/PerformanceTests.ts
index 0c108e0..7d33422 100644
--- a/__tests__/unit/PerformanceTests.ts
+++ b/__tests__/unit/PerformanceTests.ts
@@ -35,7 +35,7 @@ function generateMockActions(count) {
 
 // Test different action counts
 describe('VirtualIDE Performance Tests', () => {
-    const actionCounts = [1000, 5000];
+    const actionCounts = [1000, 5000, 10000];
 
     // Helper function to measure and log memory usage
     function measureMemoryUsage(virtualIDE: VirtualIDE, numActions: number) {
diff --git a/__tests__/unit/TerminalSideEffects.ts b/__tests__/unit/TerminalSideEffects.ts
index 47a9d67..fd75a9b 100644
--- a/__tests__/unit/TerminalSideEffects.ts
+++ b/__tests__/unit/TerminalSideEffects.ts
@@ -3,7 +3,7 @@ import { VirtualIDE } from "../../src/VirtualIDE";
 describe("VirtualIDE", () => {
     describe("cross domain interactions with file explorer", () => {
         it("should have a correct buffer state at initialization and after various actions", () => {
-            const virtualIDE = new VirtualIDE(undefined, undefined, false);
+            const virtualIDE = new VirtualIDE(undefined, undefined);
             virtualIDE.applyAction({ name: "terminal-open", value: "1" });
             const virtualTerminal = virtualIDE.virtualTerminals[0];
             expect(virtualTerminal.getBuffer()).toEqual([
diff --git a/package-lock.json b/package-lock.json
index c0b005d..8d3c658 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -1,17 +1,18 @@
 {
   "name": "@fullstackcraftllc/codevideo-virtual-ide",
-  "version": "1.0.12",
+  "version": "1.0.14",
   "lockfileVersion": 3,
   "requires": true,
   "packages": {
     "": {
       "name": "@fullstackcraftllc/codevideo-virtual-ide",
-      "version": "1.0.12",
+      "version": "1.0.14",
       "license": "MIT",
       "dependencies": {
         "@fullstackcraftllc/codevideo-virtual-author": "^1.0.3",
-        "@fullstackcraftllc/codevideo-virtual-editor": "^1.6.5",
-        "@fullstackcraftllc/codevideo-virtual-file-explorer": "^1.0.18",
+        "@fullstackcraftllc/codevideo-virtual-editor": "^1.6.6",
+        "@fullstackcraftllc/codevideo-virtual-file-explorer": "^1.0.19",
+        "@fullstackcraftllc/codevideo-virtual-mouse": "^1.0.0",
         "@fullstackcraftllc/codevideo-virtual-terminal": "^1.0.7"
       },
       "devDependencies": {
@@ -28,7 +29,7 @@
         "typescript": "^5.4.2"
       },
       "peerDependencies": {
-        "@fullstackcraftllc/codevideo-types": "^2.0.35"
+        "@fullstackcraftllc/codevideo-types": "^2.1.4"
       }
     },
     "node_modules/@ampproject/remapping": {
@@ -2028,9 +2029,9 @@
       }
     },
     "node_modules/@fullstackcraftllc/codevideo-types": {
-      "version": "2.0.35",
-      "resolved": "https://registry.npmjs.org/@fullstackcraftllc/codevideo-types/-/codevideo-types-2.0.35.tgz",
-      "integrity": "sha512-0yoU8E47oyxBcqjx12AlHyrKXDqdeE2bC+i42Th7OjT2WthOrw3Te90XyxBSOweEGhdXhH2GgkR/8MRJqZj4VQ==",
+      "version": "2.1.4",
+      "resolved": "https://registry.npmjs.org/@fullstackcraftllc/codevideo-types/-/codevideo-types-2.1.4.tgz",
+      "integrity": "sha512-g7HOLD8jwKsG1A2hFEXni/H5U4DJlBfctyxbH4S8TAX9tHq5e+gzREPiuhTqj9+0ZHUJ05nypAis3fBvVcgCAw==",
       "license": "MIT",
       "peer": true,
       "dependencies": {
@@ -2047,21 +2048,30 @@
       }
     },
     "node_modules/@fullstackcraftllc/codevideo-virtual-editor": {
-      "version": "1.6.5",
-      "resolved": "https://registry.npmjs.org/@fullstackcraftllc/codevideo-virtual-editor/-/codevideo-virtual-editor-1.6.5.tgz",
-      "integrity": "sha512-M+dir3dHO9IfZx7mDuSdNwDx6U1eQHPzrW9t5PgQ31+fuilCT91eeTjTZkfP5yT3T/UuPd9ukcYP5i6RmWIyhA==",
+      "version": "1.6.6",
+      "resolved": "https://registry.npmjs.org/@fullstackcraftllc/codevideo-virtual-editor/-/codevideo-virtual-editor-1.6.6.tgz",
+      "integrity": "sha512-mGbFdXav/Lks9q/9KDJbm5QCef/+iB6DRAa/ZahHTHUzhtr28DYGNy+R6Oj2cZz1zpcGWnzhGxpbnPqM/u5Iug==",
       "license": "MIT",
       "peerDependencies": {
-        "@fullstackcraftllc/codevideo-types": "^2.0.6"
+        "@fullstackcraftllc/codevideo-types": "^2.1.2"
       }
     },
     "node_modules/@fullstackcraftllc/codevideo-virtual-file-explorer": {
-      "version": "1.0.18",
-      "resolved": "https://registry.npmjs.org/@fullstackcraftllc/codevideo-virtual-file-explorer/-/codevideo-virtual-file-explorer-1.0.18.tgz",
-      "integrity": "sha512-umjV9ciSjmC1aUUUs6pLm7wzLRI8v42JY963OH6kHsGVs5tGJA24SZmJI7LWx3RkS2Csz8LdqVRRZoCnw5wiSQ==",
+      "version": "1.0.19",
+      "resolved": "https://registry.npmjs.org/@fullstackcraftllc/codevideo-virtual-file-explorer/-/codevideo-virtual-file-explorer-1.0.19.tgz",
+      "integrity": "sha512-zOOfZj3HeItOlovKHC+5As/b9ZoW9QgnbJctuzPAga1fPqu2xIDQ9wWoa/tdBE/Dh6O4vxS16ZPC84qXoYe9jA==",
+      "license": "MIT",
+      "peerDependencies": {
+        "@fullstackcraftllc/codevideo-types": "^2.1.4"
+      }
+    },
+    "node_modules/@fullstackcraftllc/codevideo-virtual-mouse": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/@fullstackcraftllc/codevideo-virtual-mouse/-/codevideo-virtual-mouse-1.0.0.tgz",
+      "integrity": "sha512-eCLFqlSm6ORukPL/SJ8/AC8Z3YHqLs0+jsBHlPmn6BZa0RHs17GXeZgNsicSJsZl/Mi7iyXSzJ0dE2CZ9Lmc/A==",
       "license": "MIT",
       "peerDependencies": {
-        "@fullstackcraftllc/codevideo-types": "^2.0.35"
+        "@fullstackcraftllc/codevideo-types": "^2.1.2"
       }
     },
     "node_modules/@fullstackcraftllc/codevideo-virtual-terminal": {
diff --git a/package.json b/package.json
index 5723b51..ff3b01b 100644
--- a/package.json
+++ b/package.json
@@ -39,11 +39,12 @@
   },
   "dependencies": {
     "@fullstackcraftllc/codevideo-virtual-author": "^1.0.3",
-    "@fullstackcraftllc/codevideo-virtual-editor": "^1.6.5",
-    "@fullstackcraftllc/codevideo-virtual-file-explorer": "^1.0.18",
+    "@fullstackcraftllc/codevideo-virtual-editor": "^1.6.6",
+    "@fullstackcraftllc/codevideo-virtual-file-explorer": "^1.0.19",
+    "@fullstackcraftllc/codevideo-virtual-mouse": "^1.0.0",
     "@fullstackcraftllc/codevideo-virtual-terminal": "^1.0.7"
   },
   "peerDependencies": {
-    "@fullstackcraftllc/codevideo-types": "^2.0.35"
+    "@fullstackcraftllc/codevideo-types": "^2.1.4"
   }
 }
diff --git a/src/VirtualIDE.ts b/src/VirtualIDE.ts
index a3f200e..ad90735 100644
--- a/src/VirtualIDE.ts
+++ b/src/VirtualIDE.ts
@@ -17,14 +17,16 @@ import {
   ILesson,
   isValidActions,
   IVirtualLayerLog,
-  advancedCommandValueSeparator
+  advancedCommandValueSeparator,
+  MouseLocation
 } from "@fullstackcraftllc/codevideo-types";
 import { VirtualFileExplorer } from "@fullstackcraftllc/codevideo-virtual-file-explorer";
+import { VirtualMouse } from "@fullstackcraftllc/codevideo-virtual-mouse";
 import { VirtualEditor } from "@fullstackcraftllc/codevideo-virtual-editor";
 import { VirtualTerminal } from "@fullstackcraftllc/codevideo-virtual-terminal";
 import { VirtualAuthor } from "@fullstackcraftllc/codevideo-virtual-author";
 
-export const supportedCommands = ["cat", "cd", "cp", "echo", "ls", "mkdir", "mv", "pwd", "touch", "tree"];
+export const supportedTerminalCommands = ["cat", "cd", "cp", "echo", "ls", "mkdir", "mv", "pwd", "touch", "tree"];
 
 /**
  * Represents a virtual IDE that can be manipulated by a series of actions.
@@ -36,6 +38,7 @@ export const supportedCommands = ["cat", "cd", "cp", "echo", "ls", "mkdir", "mv"
  */
 export class VirtualIDE {
   public virtualFileExplorer: VirtualFileExplorer;
+  public virtualMouse: VirtualMouse;
   public virtualEditors: Array<{ fileName: string, virtualEditor: VirtualEditor }> = [];
   public virtualTerminals: Array<VirtualTerminal> = [];
   private currentEditorIndex: number = 0;
@@ -57,6 +60,7 @@ export class VirtualIDE {
 
     // always initialize to completely empty state
     this.virtualFileExplorer = new VirtualFileExplorer(undefined, this.verbose);
+    this.virtualMouse = new VirtualMouse();
     this.virtualEditors = [];
     this.virtualTerminals = [];
     this.virtualAuthors = [];
@@ -154,9 +158,28 @@ export class VirtualIDE {
       }
     }
 
-    // likewise, mouse-click-filename is technically a MouseAction, but we need to handle it here as a cross domain to editor
-    if (action.name === "mouse-click-filename") {
-      const filename = action.value;
+    const currentMouseSnapshot = this.virtualMouse.getCurrentMouseSnapshot()
+    const currentMouseLocation = currentMouseSnapshot.location
+    const currentHoveredFile = currentMouseSnapshot.currentHoveredFileName
+    const currentHoveredFolder = currentMouseSnapshot.currentHoveredFolderName
+
+    // likewise, mouse-left-click is technically a MouseAction, but we need to handle it here as a cross domain to editor
+
+    // for the file case
+    if (currentMouseLocation === 'file-explorer-file' && action.name === "mouse-left-click") {
+      const filename = currentHoveredFile;
+      const editorIndex = this.virtualEditors.findIndex((editor) => editor.fileName === filename);
+      if (editorIndex === -1) {
+        this.addVirtualEditor(filename, new VirtualEditor([], undefined, this.verbose));
+        this.currentEditorIndex = this.virtualEditors.length - 1;
+      } else {
+        this.currentEditorIndex = editorIndex;
+      }
+    }
+
+    // for the folder case
+    if (currentMouseLocation === 'file-explorer-folder' && action.name === "mouse-left-click") {
+      const filename = currentHoveredFolder;
       const editorIndex = this.virtualEditors.findIndex((editor) => editor.fileName === filename);
       if (editorIndex === -1) {
         this.addVirtualEditor(filename, new VirtualEditor([], undefined, this.verbose));
@@ -190,6 +213,72 @@ export class VirtualIDE {
         this.currentEditorIndex = 0;
       }
     }
+
+    // another super special side effect - on any mouse right click we open the context menu based on location
+    if (action.name === 'mouse-right-click') {
+      this.executeMouseRightClickSideEffects(currentMouseLocation);
+    }
+
+    // another super special side effect - on any mouse left click we close the context menus everywhere
+    // and also need to apply any cross domain effects that a mouse click might do (like with the context menus!)
+    if (action.name === 'mouse-left-click') {
+      this.executeMouseLeftClickSideEffects(currentMouseLocation, currentHoveredFile, currentHoveredFolder)
+    }
+  }
+
+  executeMouseRightClickSideEffects(currentMouseLocation: MouseLocation): void {
+    switch (currentMouseLocation) {
+      case 'file-explorer':
+        this.virtualFileExplorer.applyAction({ name: 'file-explorer-show-context-menu', value: "1" })
+        break;
+      case 'file-explorer-file':
+        this.virtualFileExplorer.applyAction({ name: 'file-explorer-show-file-context-menu', value: "1" })
+        break;
+      case 'file-explorer-folder':
+        this.virtualFileExplorer.applyAction({ name: 'file-explorer-show-folder-context-menu', value: "1" })
+        break;
+      case 'editor':
+        this.virtualEditors[this.currentEditorIndex].virtualEditor.applyAction({ name: 'editor-show-context-menu', value: "1" })
+        break;
+      // TODO: more later, for now we just support the above context menus
+    }
+  }
+
+  executeMouseLeftClickSideEffects(currentMouseLocation: MouseLocation, currentHoveredFile: string, currentHoveredFolder: string): void {
+    this.virtualFileExplorer.applyAction({ name: 'file-explorer-hide-context-menu', value: "1" })
+      this.virtualFileExplorer.applyAction({ name: 'file-explorer-hide-file-context-menu', value: "1" })
+      this.virtualFileExplorer.applyAction({ name: 'file-explorer-hide-folder-context-menu', value: "1" })
+      this.virtualEditors[this.currentEditorIndex].virtualEditor.applyAction({ name: 'editor-hide-context-menu', value: "1" })
+
+      if (currentMouseLocation === "file-explorer-context-menu-create-new-file") {
+        // ... then toggle activation of file-explorer-input
+        this.virtualFileExplorer.applyAction({ name: 'file-explorer-show-new-file-input', value: "1" })
+      }
+
+      if (currentMouseLocation === "file-explorer-context-menu-create-new-folder") {
+        // ... then toggle activation of file-explorer-input
+        this.virtualFileExplorer.applyAction({ name: 'file-explorer-show-new-folder-input', value: "1" })
+      }
+
+      if (currentMouseLocation === "file-explorer-file-context-menu-rename") {
+        // ... then toggle activation of file-explorer-input
+        this.virtualFileExplorer.applyAction({ name: 'file-explorer-rename-file-draft-state', value: currentHoveredFile })
+      }
+
+      if (currentMouseLocation === "file-explorer-file-context-menu-delete") {
+        // ... then toggle activation of file-explorer-input
+        this.virtualFileExplorer.applyAction({ name: 'file-explorer-delete-file', value: "1" })
+      }
+
+      if (currentMouseLocation === "file-explorer-folder-context-menu-rename") {
+        // ... then toggle activation of file-explorer-input
+        this.virtualFileExplorer.applyAction({ name: 'file-explorer-rename-folder-draft-state', value: currentHoveredFolder })
+      }
+
+      if (currentMouseLocation === "file-explorer-folder-context-menu-delete") {
+        // ... then toggle activation of file-explorer-input
+        this.virtualFileExplorer.applyAction({ name: 'file-explorer-delete-folder', value: "1" })
+      }
   }
 
   /**
@@ -218,9 +307,9 @@ export class VirtualIDE {
     const commandName = parts[0];
 
     // check for supported commands - we can just log if in verbose mode
-    if (!supportedCommands.includes(commandName)) {
-      if (this.verbose) console.log(`VirtualIDE: Unsupported command: ${commandName} - supported commands are: ${supportedCommands.join(", ")}`);
-      this.logs.push({ source: 'virtual-ide', type: 'warning', message: `Unsupported command: ${commandName} - supported commands are: ${supportedCommands.join(", ")}`, timestamp: Date.now() });
+    if (!supportedTerminalCommands.includes(commandName)) {
+      if (this.verbose) console.log(`VirtualIDE: Unsupported command: ${commandName} - supported commands are: ${supportedTerminalCommands.join(", ")}`);
+      this.logs.push({ source: 'virtual-ide', type: 'warning', message: `Unsupported command: ${commandName} - supported commands are: ${supportedTerminalCommands.join(", ")}`, timestamp: Date.now() });
       // TODO: activate later with something like "terminal shows unknown commands?" in GUI - for now users can manually set output
       // terminal.applyAction({ name: 'terminal-set-output', value: `${lastCommand}: command not found` });
       // just set a fresh prompt and return
@@ -449,9 +538,14 @@ export class VirtualIDE {
    * @returns The file explorer snapshot.
    */
   getFileExplorerSnapshot(): IFileExplorerSnapshot {
-    return {
-      fileStructure: this.virtualFileExplorer.getCurrentFileStructure(),
-    }
+    return this.virtualFileExplorer.getCurrentFileExplorerSnapshot()
+  }
+
+  /**
+   * Gets the mouse snapshot.
+   */
+  getMouseSnapshot(): IMouseSnapshot {
+    return this.virtualMouse.getCurrentMouseSnapshot()
   }
 
   /**
@@ -459,6 +553,7 @@ export class VirtualIDE {
    * @returns The editor snapshot.
    */
   getEditorSnapshot(): IEditorSnapshot {
+    const activeEditor = this.getActiveEditorSafely()
     return {
       editors: this.virtualEditors.map((editor) => {
         return {
@@ -469,7 +564,8 @@ export class VirtualIDE {
           highlightCoordinates: editor.virtualEditor.getCurrentHighlightCoordinates(),
           isSaved: editor.virtualEditor.getIsSaved(),
         }
-      })
+      }),
+      isEditorContextMenuOpen: activeEditor ? activeEditor.getIsEditorContextMenuOpen() : false
     }
   }
 
@@ -486,28 +582,6 @@ export class VirtualIDE {
     }
   }
 
-
-  /**
-   * Gets the mouse snapshot.
-   */
-  getMouseSnapshot(): IMouseSnapshot {
-    return {
-      x: 0,
-      y: 0,
-      timestamp: 0,
-      type: 'move',
-      buttonStates: {
-        left: false,
-        right: false,
-        middle: false,
-      },
-      scrollPosition: {
-        x: 0,
-        y: 0,
-      },
-    }
-  }
-
   /**
    * Gets the author snapshot.
    */
@@ -560,6 +634,16 @@ export class VirtualIDE {
     return this.logs;
   }
 
+  private getActiveEditorSafely(): VirtualEditor | undefined {
+    if (this.virtualEditors.length === 0) {
+      return undefined;
+    }
+    if (this.currentEditorIndex >= this.virtualEditors.length) {
+      return undefined;
+    }
+    return this.virtualEditors[this.currentEditorIndex].virtualEditor;
+  }
+
   private reconstituteFromCourseAtActionIndex(course: ICourse, actionIndex?: number): void {
     if (actionIndex === undefined) {
       actionIndex = 0;
diff --git a/src/index.ts b/src/index.ts
index 916db26..10d0fe1 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -1 +1 @@
-export { VirtualIDE, supportedCommands } from './VirtualIDE';
\ No newline at end of file
+export { VirtualIDE, supportedTerminalCommands as supportedCommands } from './VirtualIDE';
\ No newline at end of file
